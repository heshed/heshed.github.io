<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Heshed - Salva</title>
    <link>https://heshed.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on Heshed - Salva</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Nov 2016 11:24:37 +0900</lastBuildDate>
    <atom:link href="https://heshed.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>tig</title>
      <link>https://heshed.github.io/post/tips/tig/</link>
      <pubDate>Wed, 16 Nov 2016 11:24:37 +0900</pubDate>
      
      <guid>https://heshed.github.io/post/tips/tig/</guid>
      <description>

&lt;h2 id=&#34;인텔리제이의-터미널창에서-tig-화면이-깨질때&#34;&gt;인텔리제이의 터미널창에서 tig 화면이 깨질때&lt;/h2&gt;

&lt;p&gt;~/.tigrc 에 아래의 내용을 붙여넣자
- &lt;a href=&#34;https://github.com/jonas/tig/blob/master/tigrc&#34;&gt;https://github.com/jonas/tig/blob/master/tigrc&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016-11-06</title>
      <link>https://heshed.github.io/post/github-trending/2016-11-06/</link>
      <pubDate>Sun, 06 Nov 2016 22:52:19 +0900</pubDate>
      
      <guid>https://heshed.github.io/post/github-trending/2016-11-06/</guid>
      <description>

&lt;h1 id=&#34;deep-leaning-machine-leaning&#34;&gt;deep leaning, machine leaning&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alexjc/neural-enhance&#34;&gt;neural-enhance - Super Resolution for images using deep learning.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lengstrom/fast-style-transfer&#34;&gt;fast-style-transfer - Fast Style Transfer in TensorFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZuzooVn/machine-learning-for-software-engineers&#34;&gt;Top-down learning path: Machine Learning for Software Engineers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;os&#34;&gt;os&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minoca/os&#34;&gt;minoca os - Minoca operating system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ios&#34;&gt;ios&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Jasonette/JASONETTE-iOS&#34;&gt;JASONETTE-iOS - Native App over HTTP&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Create your own native iOS app with nothing but JSON. Then send it over the Internet.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;security&#34;&gt;security&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CISOfy/lynis&#34;&gt;lynis - Security auditing tool for Linux, macOS, and UNIX-based systems.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;javascript&#34;&gt;javascript&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zeit/next.js&#34;&gt;next.js - is a minimalistic framework for server-rendered React applications.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;python&#34;&gt;python&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/channelcat/sanic&#34;&gt;sanic - Python 3.5+ web server that&amp;rsquo;s written to go fast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;aws&#34;&gt;aws&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/open-guides/og-aws&#34;&gt;Amazon Web Services — a practical guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;osx-utility&#34;&gt;osx utility&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wulkano/kap&#34;&gt;kap - An open-source screen recorder built with web technology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>webpack</title>
      <link>https://heshed.github.io/post/web/webpack/</link>
      <pubDate>Thu, 03 Nov 2016 10:02:15 +0900</pubDate>
      
      <guid>https://heshed.github.io/post/web/webpack/</guid>
      <description>

&lt;h1 id=&#34;읽을거리&#34;&gt;읽을거리&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.madewithenvy.com/getting-started-with-webpack-2-ed2b86c68783#.bz4aihfm0&#34;&gt;Getting Started with Webpack 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>lets read</title>
      <link>https://heshed.github.io/post/golang/lets-read/</link>
      <pubDate>Tue, 18 Oct 2016 15:28:10 +0900</pubDate>
      
      <guid>https://heshed.github.io/post/golang/lets-read/</guid>
      <description>

&lt;h1 id=&#34;읽을거리&#34;&gt;읽을거리&lt;/h1&gt;

&lt;h2 id=&#34;번역&#34;&gt;번역&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gosudaweb.gitbooks.io/effective-go-in-korean&#34;&gt;Effective Go in Korean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.rakyll.org/go-tool-flags/&#34;&gt;Go tooling essentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zeta.si/page/Using-Go-Channels-Instead-Of-Conditions&#34;&gt;Using Go Channels Instead Of Conditions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goin5minutes.com/blog/channel_over_channel/&#34;&gt;Passing Channels over Channels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;youtube-channel&#34;&gt;Youtube channel&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/golang/comments/57yyxv/best_go_programming_youtube_channels/&#34;&gt;Best Go Programming YouTube channels?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;golang-features&#34;&gt;Golang features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tapirgames.com/blog/golang-panic-recover-mechanism&#34;&gt;How panic/recover Works In Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tapirgames.com/blog/golang-1.7-bce&#34;&gt;Bounds Check Elimination (BCE) In Golang 1.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/ResearchPapers&#34;&gt;ResearchPapers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;course&#34;&gt;Course&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udemy.com/learn-how-to-code/?couponCode=GOLEARN&#34;&gt;udemy - Go (golang) Programming Language&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Learn How To Code: Google&amp;rsquo;s Go (golang) Programming Language&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Reducing boilerplate with go generate</title>
      <link>https://heshed.github.io/post/golang/reducing-boilerplate-with-go-generate/</link>
      <pubDate>Sun, 16 Oct 2016 01:03:50 +0900</pubDate>
      
      <guid>https://heshed.github.io/post/golang/reducing-boilerplate-with-go-generate/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.gopheracademy.com/advent-2015/reducing-boilerplate-with-go-generate/&#34;&gt;Reducing boilerplate with go generate&lt;/a&gt; 를 번역한 글입니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go는 대단한 언어입니다. 단순하고, 파워풀하며, 훌륭한 도구들을 가지고 있고, 우리 중 많은
이들은 매일 사용하는 것을 즐깁니다. 하지만 강한 타입의 언어들에서 일상적으로 발생하게 되는, 이것저것을 연결하기 위해서
필수로 사용해야 하는 boilerplate를 쓰게 됩니다.&lt;/p&gt;

&lt;p&gt;이 포스트에서 다음의 세가지 포인트를 다룰 것입니다:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;코드 생성(code generation)을 사용하여 boilerplate를 줄이도록 도와주는 Go 도구들을 만들 수 있어야 하는 이유는 무엇입니까.&lt;/li&gt;
&lt;li&gt;Go생성 시 코드 생성을 위한 블록 구성 요소는 무엇입니까.&lt;/li&gt;
&lt;li&gt;코드 생성 도구를 배우기 위한 예제는 어디에서 찾을 수 있습니까.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;boilerplate를-줄이기-위해-코드-생성을-사용하는-이유는-무엇입니까&#34;&gt;boilerplate를 줄이기 위해 코드 생성을 사용하는 이유는 무엇입니까?&lt;/h1&gt;

&lt;p&gt;때때로 우리는 reflection을 쓰고 &lt;code&gt;interface{}&lt;/code&gt;를 받아들이는 메서드들을 프로젝트에 채움으로 boilerplate를 줄이려고 노력합니다.
그러나 메서드가 &lt;code&gt;interface{}&lt;/code&gt;를 받아들일 때마다, 우리는 type 안정성을 창밖으로 던져버립니다.
type assertions와 reflection을 사용할 때, 컴파일러는 우리가 올바른 타입들을 패싱하는지 확인할 수 없으며, 런타임 panic에 더욱 노출됩니다.&lt;/p&gt;

&lt;p&gt;우리가 만들어놓은 boilerplate 코드의 몇몇은 우리의 프로젝트에서 이미 가지고 있는 코드로 부터 추론될 수 있습니다.
그로 인해, 우리는 프로젝트의 코드를 읽어서 relevant 코드를 생성하는 도구들을 제작할 수 있습니다.&lt;/p&gt;

&lt;h1 id=&#34;코드-생성을-위한-building-blocks&#34;&gt;코드 생성을 위한 building blocks&lt;/h1&gt;

&lt;h2 id=&#34;코드-읽어들이기&#34;&gt;코드 읽어들이기&lt;/h2&gt;

&lt;p&gt;기본 라이브러리는 코드를 읽고 파싱할때 무거운 작업들을 들어올릴 준비가 되어 있는 훌륭한 패키지를 가지고 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go/build&lt;/code&gt;: go 패키지에 대한 정보를 수집합니다. 패키지 이름이 주어지면, 소스코드를 포함하고 있는 디렉토리가 무엇인지,
디렉토리안의 코드와 테스트 파일이 무엇인지, 의존성이 있는 다른 패키지는 무엇인지 등등.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go/scanner&lt;/code&gt; &lt;code&gt;go/parser&lt;/code&gt;: 소스코드를 읽고 파싱하여 &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;&gt;Abstract Syntax Tree&lt;/a&gt; (AST)를 생성합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go/ast&lt;/code&gt;: AST를 표현하는데 사용되는 타입들을 선언하고 tree를 동작하고 변경하는데 도움을 주는 메서드들을 포함합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go/types&lt;/code&gt;: 데이터 타입들을 선언하고 Go 패키지 타입 체킹을 위해 사용되는 알고리즘을 구현합니다.
&lt;code&gt;go/ast&lt;/code&gt; 가 raw tree를 포함하고 있는데 비해 이 패키지는 AST를 프로세싱하기 위한 모든 작업을 수행하여 타입들에 대한 정보를 바로 얻을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;코드-생성하기&#34;&gt;코드 생성하기&lt;/h2&gt;

&lt;p&gt;코드를 생성할 때, 대부분의 프로젝트들을 단지 좋은 옛 &lt;code&gt;text/template&lt;/code&gt; 에 의존하여 코드를 생성합니다.&lt;/p&gt;

&lt;p&gt;자동으로 생성되는 파일에는 코드가 자동으로 생성되었으며, 생성한 도구가 무엇인지, 수작업으로 편집되지 않아야 함을 코멘트로 시작하는 것을 권장합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/*
* CODE GENERATED AUTOMATICALLY WITH github.com/ernesto-jimenez/gogen/unmarshalmap
* THIS FILE SHOULD NOT BE EDITED BY HAND
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;역시 &lt;code&gt;go/format&lt;/code&gt; 패키지를 이용하여 이를 쓰기 전에 코드를 format 할 수 있습니다.
이 패키지는 &lt;code&gt;go fmt&lt;/code&gt;가 사용하는 로직을 포함하고 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;go-generate&#34;&gt;go generate&lt;/h2&gt;

&lt;p&gt;프로그램을 위해 소스코드를 생성하는 도구를 작성하기 시작할 때, 두가지의 의문이 재빨리 나타납니다:
우리의 개발 과정에서 코드를 생성하는 시점은 어느 정도입니까?
생성된 코드를 최신 상태로 유지하려면 어떻게 해야 합니까?&lt;/p&gt;

&lt;p&gt;1.4 때부터 go tool 은 &lt;code&gt;generate&lt;/code&gt; 커맨드를 제공합니다.
이 도구를 사용하면 go tool 자체를 사용하여 코드 생성에 사용하는 도구들을 실행할 수 있습니다.&lt;/p&gt;

&lt;p&gt;단지 아래의 포맷으로 코멘트를 작성해 주면 됩니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//go:generate shell command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;작성하고 나면, &lt;code&gt;go generate&lt;/code&gt; 는 실행시마다 항상 자동으로 &lt;code&gt;command&lt;/code&gt; 를 호출합니다.&lt;/p&gt;

&lt;p&gt;기억해야할 중요한 두 포인트가 있습니다:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go generate&lt;/code&gt; 는 프로그램이나 패키지를 작성하는 개발자에 의해 실행하도록 의도되어집니다.
이것은 &lt;code&gt;go get&lt;/code&gt;에 의해 결코 자동으로 호출되지 않습니다.&lt;/li&gt;
&lt;li&gt;당신은 &lt;code&gt;go generate&lt;/code&gt;에 의해 실행되는 모든 도구들을 이미 설치하고 시스템 안에서 setup을 해두어야 합니다.
어떤 도구를 사용하려고 하고 어디에서 다운로드 받을 수 있는지 문서화해야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;또한, 만약 당신의 코드 생성 도구가 동일한 repository에 들어 있다면, &lt;code&gt;go:generate&lt;/code&gt;로부터
&lt;code&gt;go run&lt;/code&gt;을 호출하도록 권장합니다. 그러면 도구를 변경하려는 때마다 매번 수동으로 빌드하고 설치하는 작업 없이
&lt;code&gt;generate&lt;/code&gt; 할 수 있습니다.&lt;/p&gt;

&lt;h1 id=&#34;자신만의-도구를-만들기-시작하는-방법은-무엇입니까&#34;&gt;자신만의 도구를 만들기 시작하는 방법은 무엇입니까?&lt;/h1&gt;

&lt;p&gt;stdlib 패키지로 코드를 분석하고 생성하는 것은 훌륭하지만, 해당 문서는 거대하고, 패키지를 어떻게 사용해야 할지에 대한
노하우를 단지 문서로 부터 얻는 것은 꽤 벅찹니다.&lt;/p&gt;

&lt;p&gt;코드 생성을 시작할 때 내가 했던 가장 좋은 방법은 이미 존재하는 몇 도구들을 배우는 것이었습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;빌드할 수 있는 그러한 종류의 도구들로부터 몇몇 영감을 얻을 것입니다.&lt;/li&gt;
&lt;li&gt;그 도구들의 소스 코드로 부터 배울 수 있는 기회를 가질 것입니다.&lt;/li&gt;
&lt;li&gt;이러한 도구들 중에 스스로 유용한 도구들이 무엇인지 찾아낼 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;배우기-위한-프로젝트들&#34;&gt;배우기 위한 프로젝트들&lt;/h1&gt;

&lt;h2 id=&#34;인터페이스-구현을-위한-stubs-생성하기&#34;&gt;인터페이스 구현을 위한 stubs 생성하기&lt;/h2&gt;

&lt;p&gt;구현하려는 인터페이스에 정의된 메서드 목록을 복사하고 붙여 넣은 자신을 발견한 적이 있습니까?&lt;/p&gt;

&lt;p&gt;stubs를 자동으로 생성하기 위해 &lt;a href=&#34;https://github.com/josharian/impl&#34;&gt;&lt;code&gt;impl&lt;/code&gt;&lt;/a&gt;를 사용할 수 있습니다.
인터페이스를 위해 stdlib 의 패키지를 이용하여 구현해야할 메서드를 출력합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ impl &#39;f *File&#39; io.ReadWriteCloser
func (f *File) Read(p []byte) (n int, err error) {
    panic(&amp;quot;not implemented&amp;quot;)
}

func (f *File) Write(p []byte) (n int, err error) {
    panic(&amp;quot;not implemented&amp;quot;)
}

func (f *File) Close() error {
    panic(&amp;quot;not implemented&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mockery로-mocks-자동-생성하기&#34;&gt;mockery로 mocks 자동 생성하기&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;testify&lt;/a&gt;는 유닛테스팅을 실행할 때 쉽게 의존성을 mock할 수 있는 &lt;a href=&#34;https://godoc.org/github.com/stretchr/testify/mock&#34;&gt;mock&lt;/a&gt; 패키지를 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;인터페이스들이 암시적으로 만족하기 때문에, 의존성들을 인터페이스들을 이용하여 특정화 할 수 있으며, 유닛 테스팅 중에 외부 의존성보다는 mock을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이론적인 downcaser 인터페이스를 mock 하는 방법에 대한 매우 간단한 예제:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;testing&amp;quot;

  &amp;quot;github.com/stretchr/testify/mock&amp;quot;
)

type downcaser interface {
  Downcase(string) (string, error)
}

func TestMock(t *testing.T) {
  m := &amp;amp;mockDowncaser{}
  m.On(&amp;quot;Downcase&amp;quot;, &amp;quot;FOO&amp;quot;).Return(&amp;quot;foo&amp;quot;, nil)
  m.Downcase(&amp;quot;FOO&amp;quot;)
  m.AssertNumberOfCalls(t, &amp;quot;Downcase&amp;quot;, 1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mock 구현은 꽤 직관적입니다:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type mockDowncaser struct {
  mock.Mock
}

func (m *mockDowncaser) Downcase(a0 string) (string, error) {
  ret := m.Called(a0)
  return ret.Get(0).(string), ret.Error(1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;실제적으로, 구현체로부터 볼 수 있는 것은, 꽤 직관적이어서 인터페이스 정의 자체가 mock을 자동으로 생성하기 위한 모든 정보를 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/vektra/mockery&#34;&gt;&lt;code&gt;mockery&lt;/code&gt;&lt;/a&gt; 이 하는 것:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mockery -inpkg -testonly -name=downcaser
Generating mock for: downcaser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;나는 항상 &lt;code&gt;go generate&lt;/code&gt; 를 사용하여 인터페이스들에 대한 mocks를 자동으로 생성합니다.
우리는 이전 예제에 mock up 과 실행을 위해 단지 한 라인만 추가해 주면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;testing&amp;quot;
)

type downcaser interface {
  Downcase(string) (string, error)
}

//go:generate mockery -inpkg -testonly -name=downcaser

func TestMock(t *testing.T) {
  m := &amp;amp;mockDowncaser{}
  m.On(&amp;quot;Downcase&amp;quot;, &amp;quot;FOO&amp;quot;).Return(&amp;quot;foo&amp;quot;, nil)
  m.Downcase(&amp;quot;FOO&amp;quot;)
  m.AssertNumberOfCalls(t, &amp;quot;Downcase&amp;quot;, 1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go generatoe 를 실행했을 때 모든 것이 한번에 set up 되는 지 볼 수 있습니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go test
# github.com/ernesto-jimenez/test
./main_test.go:14: undefined: mockDowncaser
FAIL    github.com/ernesto-jimenez/test [build failed]

$ go generate
Generating mock for: downcaser

$ go test
PASS
ok      github.com/ernesto-jimenez/test 0.011s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;인터페이스 변경을 할 때 마다 &lt;code&gt;go generate&lt;/code&gt;를 실행하면 해당하는 mock이 업데이트 될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/vektra/mockery&#34;&gt;&lt;code&gt;mockery&lt;/code&gt;&lt;/a&gt; 는 내가 &lt;a href=&#34;https://godoc.org/github.com/stretchr/testify/mock&#34;&gt;&lt;code&gt;testify/mock&lt;/code&gt;&lt;/a&gt;에 contribute를
시작한 주된 이유이고 &lt;code&gt;testify&lt;/code&gt;의 maintainer가 되었습니다.
그러지만, &lt;code&gt;go/types&lt;/code&gt; 가 1.5의 표준 라이브러리에 포함되기 이전에 개발되었기 때문에, 저 레벨 &lt;code&gt;go/ast&lt;/code&gt;을 이용하여 구현되었고,
코드를 보기 어렵게 만들었으며 &lt;a href=&#34;https://github.com/vektra/mockery/issues/18&#34;&gt;failing to generate mocks from interfaces using
composition&lt;/a&gt; 같은 버그가 나타났습니다.&lt;/p&gt;

&lt;h2 id=&#34;gegen-실험&#34;&gt;gegen 실험&lt;/h2&gt;

&lt;p&gt;나는 코드 생성에 대해 익히기 위해 &lt;a href=&#34;https://github.com/ernesto-jimenez/gogen&#34;&gt;&lt;code&gt;gogen&lt;/code&gt;&lt;/a&gt; 패키지에서 만들었던 코드 생성 도구들을 오픈소스화 했습니다.&lt;/p&gt;

&lt;p&gt;아래의 세가지 도구들을 포함합니다:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ernesto-jimenez/gogen/tree/master/cmd/goautomock/main.go&#34;&gt;goautomock&lt;/a&gt;: mockery 와 유사하지만 &lt;code&gt;go/ast&lt;/code&gt;가 아닌 &lt;code&gt;go/types&lt;/code&gt;를 이용해 구현되었습니다.
따라서 composed 인터페이스들에 대해서 역시 동작합니다. 역시 표준 라이브러리로부터 인터페이스를 mock 하기에 용이합니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ernesto-jimenez/gogen/tree/master/cmd/gounmarshalmap&#34;&gt;gounmarshalmap&lt;/a&gt;: 구조체를 가져 map을 구조체로 디코딩하는 &lt;code&gt;UnmarshalMap(map[string]interface{})&lt;/code&gt; 함수를 생성합니다.
reflection 보다는 &lt;a href=&#34;https://github.com/mitchellh/mapstructure&#34;&gt;&lt;code&gt;mapstructure&lt;/code&gt;&lt;/a&gt; 의 대안으로 코드 생성에 동작하도록 작성되었습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ernesto-jimenez/gogen/tree/master/cmd/gospecific&#34;&gt;gospecific&lt;/a&gt;: &lt;code&gt;interface{}&lt;/code&gt; 에 의존하는 제네릭으로부터 특정한 패키지를 생성하는 작은 실험입니다.
제네릭의 패키지 소스코드를 읽어서 &lt;code&gt;interface{}&lt;/code&gt; 를 사용하는 제네릭 패키지에서 특정한 타입을 사용하는 새로운 패키지를 생성합니다.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;랩핑-업&#34;&gt;랩핑 업&lt;/h1&gt;

&lt;p&gt;코드 생성은 대단합니다. 그것은 우리의 프로그램 타입을 안전하게 지키는 동시에 반복적인 코드를 쓸 수 있습니다.
우리는 &lt;a href=&#34;https://slackline.io&#34;&gt;Slackline&lt;/a&gt;을 만들 때 폭넓게 사용하였고 곧 &lt;a href=&#34;https://github.com/stretchr/testify/pull/241&#34;&gt;testify&lt;/a&gt; 에도 사용할 것입니다.&lt;/p&gt;

&lt;p&gt;그럼에도 스스로에게 질문하기를 기억하십시오: 이러한 도구를 작성하는 것이 시간을 아낍니까?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xkcd.com/1205/&#34;&gt;xkcd&lt;/a&gt; 그 대답에 대답하는데 도움이 될 것입니다.
&lt;a href=&#34;https://xkcd.com/1205/&#34;&gt;&lt;img src=&#34;http://imgs.xkcd.com/comics/is_it_worth_the_time.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>awesome go</title>
      <link>https://heshed.github.io/post/golang/awesome-go/</link>
      <pubDate>Sat, 08 Oct 2016 23:06:10 +0900</pubDate>
      
      <guid>https://heshed.github.io/post/golang/awesome-go/</guid>
      <description>

&lt;h1 id=&#34;golang-리소스-모음&#34;&gt;Golang 리소스 모음&lt;/h1&gt;

&lt;h2 id=&#34;static-analysis&#34;&gt;static analysis&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nickng/dingo-hunter&#34;&gt;dingo-hunter - Static analyser for finding Deadlocks in Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;performance&#34;&gt;performance&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://go-talks.appspot.com/github.com/davecheney/presentations/writing-high-performance-go.slide&#34;&gt;Writing High Performance Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/codesenberg/bombardier&#34;&gt;bombardier - Fast crossplatform HTTP benchmarking tool written in Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;http-trace&#34;&gt;http trace&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davecheney/httpstat&#34;&gt;httpstat&lt;/a&gt; fantastic http stat&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/opentracing/opentracing-go&#34;&gt;opentracing-go - Go implementation of the OpenTracing API&lt;/a&gt; &lt;a href=&#34;http://opentracing.io&#34;&gt;http://opentracing.io&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/opentracing/tracing-http-request-latency-in-go-with-opentracing-7cc1282a100a#.8z81nkehv&#34;&gt;Tracing HTTP request latency in Go with OpenTracing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;core&#34;&gt;core&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.altoros.com/author/siarhei-matsiukevich&#34;&gt;Golang Internals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rsc/c2go&#34;&gt;c2go - C to Go translation tool supporting Go toolchain migration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;algorithm&#34;&gt;algorithm&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cespare/xxhash&#34;&gt;xxhash - A Go implementation of the 64-bit xxHash algorithm (XXH64)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tmrts/go-patterns&#34;&gt;go-patterns - Curated list of Go patterns and idioms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;orm&#34;&gt;orm&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-reform/reform&#34;&gt;reform - A better ORM for Go, based on non-empty interfaces and code generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;database&#34;&gt;database&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microo8/mimir&#34;&gt;mimir - Generates minimal embedded database from structs in golang&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;using &lt;a href=&#34;https://github.com/syndtr/goleveldb&#34;&gt;leveldb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/attic-labs/noms&#34;&gt;noms - The versioned, forkable, syncable database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vision&#34;&gt;vision&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fogleman/primitive&#34;&gt;primitive - Reproducing images with geometric primitives.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/anthonynsimon/bild&#34;&gt;bild - A collection of parallel image processing algorithms in pure Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;actor&#34;&gt;actor&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AsynkronIT/gam&#34;&gt;GAM - Go Actor Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;desktop&#34;&gt;desktop&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alexflint/gallium&#34;&gt;gallium - Build desktop applications in Go and HTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;apps&#34;&gt;apps&lt;/h2&gt;

&lt;h2 id=&#34;free-resources&#34;&gt;free resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/egonelbre/gophers&#34;&gt;Free gophers images&lt;/a&gt; under &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;CC0&lt;/a&gt; license.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web-server&#34;&gt;web server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mholt/caddy/&#34;&gt;Caddy - Fast, cross-platform HTTP/2 web server with automatic HTTPS&lt;/a&gt; &lt;a href=&#34;https://caddyserver.com/&#34;&gt;https://caddyserver.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/armor&#34;&gt;armor - Simple HTTP server, supports HTTP/2 and auto TLS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pressly/chi&#34;&gt;chi - lightweight, idiomatic and composable router for building Go 1.7+ HTTP services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;logging&#34;&gt;logging&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uber-go/zap&#34;&gt;zap - Fast, structured, leveled logging in Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;distributed-computation&#34;&gt;distributed computation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chrislusf/glow&#34;&gt;Glow is an easy-to-use distributed computation system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cross-compile&#34;&gt;cross compile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mitchellh/gox&#34;&gt;gox - A dead simple, no frills Go cross compile tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/laher/goxc&#34;&gt;goxc - a build tool for Go, with a focus on cross-compiling, packaging and deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>study sites</title>
      <link>https://heshed.github.io/post/study/site/</link>
      <pubDate>Sun, 18 Sep 2016 23:10:08 +0900</pubDate>
      
      <guid>https://heshed.github.io/post/study/site/</guid>
      <description>

&lt;h1 id=&#34;shichao&#34;&gt;shichao&lt;/h1&gt;

&lt;p&gt;필수로 봐야할 컴퓨터 프로그래밍책들을 요약해둔 사이트&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://notes.shichao.io/&#34;&gt;https://notes.shichao.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://notes.shichao.io/apue/&#34;&gt;https://notes.shichao.io/apue/&lt;/a&gt; &lt;strong&gt;Advanced programming Unix environment&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://notes.shichao.io/lkd/&#34;&gt;https://notes.shichao.io/lkd/&lt;/a&gt; &lt;strong&gt;Linux Kernel&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://notes.shichao.io/unp/&#34;&gt;https://notes.shichao.io/unp/&lt;/a&gt; &lt;strong&gt;Unix Networking Programming&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://notes.shichao.io/tcpv1/&#34;&gt;https://notes.shichao.io/tcpv1/&lt;/a&gt; &lt;strong&gt;TCP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://notes.shichao.io/gopl/&#34;&gt;https://notes.shichao.io/gopl/&lt;/a&gt; &lt;strong&gt;The Golang Programming Language&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>raft</title>
      <link>https://heshed.github.io/post/raft/</link>
      <pubDate>Sat, 17 Sep 2016 07:19:12 +0900</pubDate>
      
      <guid>https://heshed.github.io/post/raft/</guid>
      <description>

&lt;h1 id=&#34;raft&#34;&gt;raft&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;http://thesecretlivesofdata.com/raft/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raft.github.io/&#34;&gt;https://raft.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/kairosfox/raft-consensus-algorithm&#34;&gt;http://www.slideshare.net/kairosfox/raft-consensus-algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.consul.io/docs/internals/consensus.html&#34;&gt;https://www.consul.io/docs/internals/consensus.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;paxos&#34;&gt;Paxos&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Paxos_(computer_science&#34;&gt;https://en.wikipedia.org/wiki/Paxos_(computer_science&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ref&#34;&gt;ref&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Consensus_(computer_science&#34;&gt;https://en.wikipedia.org/wiki/Consensus_(computer_science&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Leader_election&#34;&gt;https://en.wikipedia.org/wiki/Leader_election&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Atomic_broadcast&#34;&gt;https://en.wikipedia.org/wiki/Atomic_broadcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/State_machine_replication&#34;&gt;https://en.wikipedia.org/wiki/State_machine_replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.lastmind.io/archives/tag/consensus&#34;&gt;http://blog.lastmind.io/archives/tag/consensus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://heshed.github.io/post/about/</link>
      <pubDate>Tue, 13 Sep 2016 14:31:19 +0900</pubDate>
      
      <guid>https://heshed.github.io/post/about/</guid>
      <description>

&lt;h1 id=&#34;about&#34;&gt;About&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://golangkorea.github.io&#34;&gt;https://golangkorea.github.io&lt;/a&gt; 에 영감을 받아 만들어 본 사이트&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golangkorea/golangkorea-hugo&#34;&gt;golangkorea-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golangkorea/golangkorea.github.io&#34;&gt;golangkorea.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;이용한-서비스-및-도구들&#34;&gt;이용한 서비스 및 도구들&lt;/h1&gt;

&lt;h2 id=&#34;호스트&#34;&gt;호스트&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;pages.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;정적-사이트-생성기&#34;&gt;정적 사이트 생성기&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;댓글-시스템&#34;&gt;댓글 시스템&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://disqus.com/&#34;&gt;disqus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;작업-환경&#34;&gt;작업 환경&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;osx, intellij&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>